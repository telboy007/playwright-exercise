# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Run Tests

on: [workflow_dispatch]

concurrency:
  group: google-tests

jobs:
  google-tests:
    name: Google Search (${{ matrix.shard }}/${{ strategy.job-total }})
    strategy:
      matrix:
        shard: [1]
    runs-on: ubuntu-latest
    environment: 
      name: production

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Environmental Variables
        run: |
          touch .env
          echo BASE_URL='${{ secrets.BASE_URL }}' >> .env
          
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: | # need to pick one
            ~/.cache/ms-playwright # ubuntu runners
            ~/Library/Caches/ms-playwright # MacOS runners
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - run: npm ci
      - if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium firefox # install chromium and firefox
      - if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps
        
      - name: Run headed tests
        uses: coactions/setup-xvfb@v1.0.1
        with:
          run: npx playwright test --headed --workers=2 --retries=2 --shard=${{ matrix.shard }}/${{ strategy.job-total }}

      # - name: Upload results to datadog
      #   if: always()
      #   uses: datadog/junit-upload-github-action@v1
      #   with:
      #     api-key: ${{ secrets.DD_API_KEY }}
      #     env: production
      #     service: e2e-tests
      #     files: ./output/junit/results.xml

      - name: Save test result screenshots
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: google-tests-assets
          path: test-results/